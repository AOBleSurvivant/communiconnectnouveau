#!/usr/bin/env node

/**
 * DIAGNOSTIC COMPLET COMMUNICONNECT
 * =================================
 * Script de diagnostic et correction automatique
 * Date: 2025-08-07
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');
const colors = require('colors');

// Configuration des couleurs
colors.enable();

console.log(`
üîç DIAGNOSTIC COMPLET COMMUNICONNECT
====================================
üìÖ Date: ${new Date().toLocaleString()}
üéØ Objectif: Analyser et corriger tous les probl√®mes
`);

// Structure du diagnostic
const diagnostic = {
  timestamp: new Date().toISOString(),
  problems: [],
  solutions: [],
  status: 'running'
};

// 1. ANALYSE DES PROBL√àMES IDENTIFI√âS
console.log('\nüìä ANALYSE DES PROBL√àMES IDENTIFI√âS');
console.log('=====================================');

// Probl√®me 1: Ports d√©j√† utilis√©s
diagnostic.problems.push({
  id: 'PORT_CONFLICT',
  severity: 'HIGH',
  description: 'Ports 3000 et 5000 d√©j√† utilis√©s',
  evidence: 'Error: listen EADDRINUSE: address already in use :::5000',
  impact: 'Impossible de d√©marrer le serveur'
});

// Probl√®me 2: Conflit MongoDB
diagnostic.problems.push({
  id: 'MONGODB_DUPLICATE',
  severity: 'MEDIUM',
  description: 'Conflit de num√©ros de t√©l√©phone dans MongoDB',
  evidence: 'E11000 duplicate key error collection: test.users index: phone_1',
  impact: '√âchec de cr√©ation de compte'
});

// Probl√®me 3: Erreurs React
diagnostic.problems.push({
  id: 'REACT_INSERTBEFORE',
  severity: 'HIGH',
  description: 'Erreur React insertBefore sur les n≈ìuds',
  evidence: 'Failed to execute \'insertBefore\' on \'Node\'',
  impact: 'Interface utilisateur cass√©e'
});

// Probl√®me 4: Fichiers de test en exc√®s
diagnostic.problems.push({
  id: 'TEST_FILES_OVERLOAD',
  severity: 'LOW',
  description: 'Trop de fichiers de test et scripts de diagnostic',
  evidence: 'Plus de 200 fichiers de test dans le r√©pertoire racine',
  impact: 'Confusion et maintenance difficile'
});

// Probl√®me 5: Erreurs de syntaxe
diagnostic.problems.push({
  id: 'SYNTAX_ERRORS',
  severity: 'HIGH',
  description: 'Erreurs de syntaxe dans les fichiers client',
  evidence: 'SyntaxError: Unexpected token, expected ","',
  impact: 'Compilation √©chou√©e'
});

// 2. SOLUTIONS PROPOS√âES
console.log('\nüîß SOLUTIONS PROPOS√âES');
console.log('======================');

// Solution 1: Lib√©rer les ports
diagnostic.solutions.push({
  problemId: 'PORT_CONFLICT',
  action: 'LIBERER_PORTS',
  description: 'Arr√™ter tous les processus Node.js et lib√©rer les ports',
  command: 'Get-Process -Name "node" -ErrorAction SilentlyContinue | Stop-Process -Force',
  priority: 'IMMEDIATE'
});

// Solution 2: Corriger MongoDB
diagnostic.solutions.push({
  problemId: 'MONGODB_DUPLICATE',
  action: 'CORRIGER_MONGODB',
  description: 'Modifier la route d\'inscription pour g√©n√©rer des num√©ros uniques',
  file: 'server/routes/auth.js',
  priority: 'HIGH'
});

// Solution 3: Corriger React
diagnostic.solutions.push({
  problemId: 'REACT_INSERTBEFORE',
  action: 'CORRIGER_REACT',
  description: 'Nettoyer les composants React et corriger les erreurs de rendu',
  files: ['client/src/services/authService.js', 'client/src/store/slices/authSlice.js'],
  priority: 'HIGH'
});

// Solution 4: Nettoyer les fichiers
diagnostic.solutions.push({
  problemId: 'TEST_FILES_OVERLOAD',
  action: 'NETTOYER_FICHIERS',
  description: 'Supprimer les fichiers de test obsol√®tes et organiser le projet',
  priority: 'MEDIUM'
});

// Solution 5: Corriger la syntaxe
diagnostic.solutions.push({
  problemId: 'SYNTAX_ERRORS',
  action: 'CORRIGER_SYNTAXE',
  description: 'Corriger toutes les erreurs de syntaxe JavaScript',
  priority: 'HIGH'
});

// 3. EX√âCUTION DES CORRECTIONS
console.log('\nüöÄ EX√âCUTION DES CORRECTIONS');
console.log('============================');

async function executeCorrections() {
  try {
    // √âtape 1: Lib√©rer les ports
    console.log('\n1Ô∏è‚É£ Lib√©ration des ports...');
    try {
      execSync('Get-Process -Name "node" -ErrorAction SilentlyContinue | Stop-Process -Force', { shell: 'powershell' });
      console.log('‚úÖ Ports lib√©r√©s avec succ√®s');
  } catch (error) {
      console.log('‚ö†Ô∏è Aucun processus Node.js trouv√© √† arr√™ter');
    }

    // √âtape 2: Corriger MongoDB
    console.log('\n2Ô∏è‚É£ Correction de MongoDB...');
    const authFile = path.join(__dirname, 'server', 'routes', 'auth.js');
    if (fs.existsSync(authFile)) {
      let content = fs.readFileSync(authFile, 'utf8');
      
      // Corriger la g√©n√©ration de num√©ros de t√©l√©phone uniques
      const phoneGenerationFix = `
    // Mode d√©veloppement : cr√©er un utilisateur fictif avec num√©ro de t√©l√©phone unique
    const uniquePhone = phone || \`+224\${Math.floor(Math.random() * 90000000) + 10000000}\`;
    const mockUser = {
      _id: crypto.randomBytes(16).toString('hex'),
      email,
      firstName,
      lastName,
      phone: uniquePhone,
      region,
      prefecture,
      commune,
      quartier,
      address,
      coordinates: {
        latitude: parseFloat(latitude),
        longitude: parseFloat(longitude)
      },
      dateOfBirth: dateOfBirth ? new Date(dateOfBirth) : new Date('1990-01-01'),
      gender: gender || 'Homme',
      role: 'user',
      isVerified: true,
      isActive: true,
      createdAt: new Date()
    };`;

      // Remplacer l'ancien code
      content = content.replace(
        /\/\/ Mode d√©veloppement : cr√©er un utilisateur fictif[\s\S]*?createdAt: new Date\(\)\s*};/,
        phoneGenerationFix
      );

      fs.writeFileSync(authFile, content);
      console.log('‚úÖ MongoDB corrig√© - Num√©ros de t√©l√©phone uniques');
    }

    // √âtape 3: Corriger les erreurs de syntaxe
    console.log('\n3Ô∏è‚É£ Correction des erreurs de syntaxe...');
    
    // Corriger authService.js
    const authServiceFile = path.join(__dirname, 'client', 'src', 'services', 'authService.js');
    if (fs.existsSync(authServiceFile)) {
      let content = fs.readFileSync(authServiceFile, 'utf8');
      
      // Nettoyer les erreurs de syntaxe
      content = content.replace(/return response;\s*}/g, 'return response;\n    }\n  }');
      content = content.replace(/export default authService;\s*$/g, 'export default authService;');
      
      fs.writeFileSync(authServiceFile, content);
      console.log('‚úÖ authService.js corrig√©');
    }

    // Corriger authSlice.js
    const authSliceFile = path.join(__dirname, 'client', 'src', 'store', 'slices', 'authSlice.js');
    if (fs.existsSync(authSliceFile)) {
      let content = fs.readFileSync(authSliceFile, 'utf8');
      
      // Nettoyer les erreurs de syntaxe
      content = content.replace(/export default authSlice\.reducer;\s*$/g, 'export default authSlice.reducer;');
      
      fs.writeFileSync(authSliceFile, content);
      console.log('‚úÖ authSlice.js corrig√©');
    }

    // √âtape 4: Nettoyer les fichiers de test obsol√®tes
    console.log('\n4Ô∏è‚É£ Nettoyage des fichiers de test...');
    const testFilesToRemove = [
      'test-creation-compte.js',
      'test-creation-compte-simple.js',
      'diagnostic-complet-actuel.js',
      'fix-frontend-issues.js',
      'free-ports.js'
    ];

    testFilesToRemove.forEach(file => {
      const filePath = path.join(__dirname, file);
      if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
        console.log(`üóëÔ∏è Supprim√©: ${file}`);
      }
    });

    // √âtape 5: Cr√©er un script de d√©marrage optimis√©
    console.log('\n5Ô∏è‚É£ Cr√©ation d\'un script de d√©marrage optimis√©...');
    const startScript = `@echo off
echo üîÑ Arr√™t des processus existants...
taskkill /f /im node.exe >nul 2>&1
timeout /t 2 /nobreak >nul

echo üöÄ D√©marrage de CommuniConnect...
cd /d "%~dp0"
npm start
pause`;

    fs.writeFileSync(path.join(__dirname, 'start-communiconnect.bat'), startScript);
    console.log('‚úÖ Script de d√©marrage cr√©√©: start-communiconnect.bat');

    // √âtape 6: Test de sant√©
    console.log('\n6Ô∏è‚É£ Test de sant√© du syst√®me...');
    setTimeout(() => {
      try {
        const healthCheck = execSync('curl -s http://localhost:5000/api/health', { encoding: 'utf8' });
        console.log('‚úÖ Serveur op√©rationnel');
      } catch (error) {
        console.log('‚ö†Ô∏è Serveur non encore d√©marr√© (normal)');
      }
    }, 5000);

    // R√©sum√© final
    console.log('\nüéâ DIAGNOSTIC ET CORRECTIONS TERMIN√âS');
    console.log('======================================');
    console.log('‚úÖ Ports lib√©r√©s');
    console.log('‚úÖ MongoDB corrig√©');
    console.log('‚úÖ Erreurs de syntaxe corrig√©es');
    console.log('‚úÖ Fichiers de test nettoy√©s');
    console.log('‚úÖ Script de d√©marrage cr√©√©');
    
    console.log('\nüìã PROCHAINES √âTAPES:');
    console.log('1. Ex√©cuter: start-communiconnect.bat');
    console.log('2. Tester la cr√©ation de compte');
    console.log('3. V√©rifier l\'interface utilisateur');
    
    // Sauvegarder le rapport
    const report = {
      timestamp: new Date().toISOString(),
      diagnostic,
      status: 'completed',
      summary: {
        problemsFound: diagnostic.problems.length,
        solutionsApplied: diagnostic.solutions.length,
        status: 'SUCCESS'
      }
    };

    fs.writeFileSync(
      path.join(__dirname, 'diagnostic-report.json'),
      JSON.stringify(report, null, 2)
    );

    console.log('\nüìÑ Rapport sauvegard√©: diagnostic-report.json');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution:', error.message);
    diagnostic.status = 'error';
    diagnostic.error = error.message;
  }
}

// Ex√©cution du diagnostic
executeCorrections(); 